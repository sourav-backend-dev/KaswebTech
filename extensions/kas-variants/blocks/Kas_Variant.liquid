<script>
    document.addEventListener("DOMContentLoaded", function () {
        // Fetching metafields from Shopify
        var metafields = {{ product.metafields.Kaswebtech.Variant }};
        var container = document.getElementById("KASvariant-container");
        var totalPrice = 0;
        var previousDropdownValues = {};
        
        // Checking if container exists
        if (container) {
            // Iterating through variants
            metafields.variants.forEach(function (variant) {
                var title = variant.title;
                var selected = variant.selected;
                var values = Object.keys(variant.values);
                var prices = [];

                // Fetching prices if available
                if (variant.havePrice) {
                    prices = Object.values(variant.values);
                }

                // Logging variant details (for debugging)
                console.log("Title:", title);
                console.log("Selected:", selected);
                console.log("Values:", values);
                console.log("Prices:", prices);

                // Creating UI elements based on variant type
                var buttonTitle = document.createElement("h4");
                buttonTitle.textContent = title;
                container.appendChild(buttonTitle);

                if (selected === "button") {
                    // Creating buttons for button type variants
                    values.forEach(function (value, index) {
                        var button = document.createElement("button");
                        button.textContent = value.trim();
                        button.dataset.title = title;
                        button.title = title;
                        container.appendChild(button);
                    });
                } else if (selected === "dropdown") {
                    // Creating dropdown for dropdown type variants
                    var select = document.createElement("select");
                    select.dataset.title = title;
                    select.title = title;
                    var defaultOption = document.createElement("option");
                    defaultOption.text = "Select " + title;
                    defaultOption.disabled = true;
                    defaultOption.selected = true;
                    select.add(defaultOption);
                    values.forEach(function (value) {
                        var option = document.createElement("option");
                        option.text = value.trim();
                        select.add(option);
                    });
                    container.appendChild(select);
                } else if (selected === "TextField") {
                    // Creating text input for TextField type variants
                    var textField = document.createElement("input");
                    textField.type = "text";
                    textField.name = "properties[" + title + "]";
                    textField.placeholder = title;
                    container.appendChild(textField);
                } else {
                    console.error("Invalid 'selected' value:", selected);
                }
            });
        } else {
            console.error("Container element not found.");
        }

        var selectedValues = {};

        // Event listener for button clicks
        container.addEventListener("click", function (event) {
            if (event.target.tagName === "BUTTON") {
                var title = event.target.dataset.title;
                var value = event.target.textContent.trim();

                var variant = metafields.variants.find(function (variant) {
                    return variant.title === title && variant.values[value] !== null;
                });

                if (variant) {
                    toggleInputField(title, value, variant.values[value]);
                } else {
                    console.error("Variant not found for title:", title, "and value:", value);
                }

                addToSelectedValues(title, value);
                event.target.classList.toggle("clicked");
            }
        });

        // Event listener for dropdown changes
        container.addEventListener("change", function (event) {
            if (event.target.tagName === "SELECT") {
                var title = event.target.dataset.title;
                var value = event.target.value.trim();

                var variant = metafields.variants.find(function (variant) {
                    return variant.title === title && variant.values[value] !== null;
                });

                if (variant) {
                    updateDropdownPrice(title, value, variant.values[value]);
                } else {
                    console.error("Variant not found for title:", title, "and value:", value);
                }
                addToSelectedValuesDropDown(title, value);
                updateInputFieldsForDropdown(title, value);
            } else if (event.target.tagName === "INPUT") {
                var title = event.target.name.replace("properties[", "").replace("]", "");
                var value = event.target.value.trim();
                addToSelectedValues(title, value);
                updateInputFieldsForTextField(title, value);
            }
        });

        // Function to handle toggling input fields based on button clicks
        function toggleInputField(title, value, price) {
            var priceTextId = "total-price";
            var priceTextNode = document.getElementById(priceTextId);

            if (!priceTextNode) {
                priceTextNode = document.createElement("p");
                priceTextNode.id = priceTextId;
                priceTextNode.style.color = "red";
                container.appendChild(priceTextNode);
            }

            var isClicked = selectedValues[title] && selectedValues[title].includes(value);

            if (isClicked) {
                totalPrice -= price;
            } else {
                totalPrice += price;
            }

            priceTextNode.textContent = "Cart Price will Increment By: $" + totalPrice;
            updateInputFields(); // Ensure input fields are updated with the new total price
        }

        // Function to add selected values to selectedValues object for dropdown type variants
        function addToSelectedValuesDropDown(title, value) {
            selectedValues[title] = [value];
            updateInputFields();
        }

        // Function to add selected values to selectedValues object for button and text input variants
        function addToSelectedValues(title, value) {
            if (!selectedValues.hasOwnProperty(title)) {
                selectedValues[title] = [];
            }
            var index = selectedValues[title].indexOf(value);
            if (index === -1) {
                selectedValues[title].push(value);
            } else {
                selectedValues[title].splice(index, 1);
            }
            updateInputFields();
        }

        // Function to update hidden input fields for text input variants
        function updateInputFieldsForTextField(title, value) {
            var targetForms = document.querySelectorAll('form[action="/cart/add"]');
            if (targetForms.length > 0) {
                targetForms.forEach(function (targetForm) {
                    var inputName = "properties[" + title + "]";
                    targetForm.querySelectorAll('input[name="' + inputName + '"]').forEach(function (input) {
                        input.parentNode.removeChild(input);
                    });
                    if (value !== "") {
                        var newInput = document.createElement("input");
                        newInput.type = "hidden";
                        newInput.name = inputName;
                        newInput.value = value;
                        targetForm.appendChild(newInput);
                    }
                });
            } else {
                console.error("Forms with action '/cart/add' not found.");
            }
        }

        // Function to update total price and display for dropdown type variants
        function updateDropdownPrice(title, value, price) {
            var priceTextId = "total-price";
            var priceTextNode = document.getElementById(priceTextId);

            if (!priceTextNode) {
                priceTextNode = document.createElement("p");
                priceTextNode.id = priceTextId;
                priceTextNode.style.color = "red";
                container.appendChild(priceTextNode);
            }

            var previousValue = previousDropdownValues[title] ? previousDropdownValues[title].value : null;
            var previousPrice = previousDropdownValues[title] ? previousDropdownValues[title].price : 0;

            totalPrice -= previousPrice;
            totalPrice += price;

            priceTextNode.textContent = "Cart Price will Increment By: $" + totalPrice;

            previousDropdownValues[title] = { value: value, price: price };
            updateInputFields(); // Ensure input fields are updated with the new total price
        }

        // Function to update hidden input fields for dropdown type variants
        function updateInputFieldsForDropdown(title, value) {
            var targetForms = document.querySelectorAll('form[action="/cart/add"]');
            if (targetForms.length > 0) {
                targetForms.forEach(function (targetForm) {
                    var inputName = "properties[" + title + "]";
                    targetForm.querySelectorAll('input[name="' + inputName + '"]').forEach(function (input) {
                        input.parentNode.removeChild(input);
                    });
                    if (value !== "") {
                        var newInput = document.createElement("input");
                        newInput.type = "hidden";
                        newInput.name = inputName;
                        newInput.value = value;
                        targetForm.appendChild(newInput);
                    }
                });
            } else {
                console.error("Forms with action '/cart/add' not found.");
            }
        }

        // Function to update all input fields with selected values and total price
        function updateInputFields() {
            var targetForms = document.querySelectorAll('form[action="/cart/add"]');
            if (targetForms.length > 0) {
                targetForms.forEach(function (targetForm) {
                    targetForm.querySelectorAll('input[name^="properties["]').forEach(function (input) {
                        input.parentNode.removeChild(input);
                    });
                    Object.keys(selectedValues).forEach(function (title) {
                        var value = selectedValues[title].join(",");
                        var newInput = document.createElement("input");
                        newInput.type = "hidden";
                        newInput.name = "properties[" + title + "]";
                        newInput.value = value;
                        targetForm.appendChild(newInput);
                    });
                    var totalPriceInput = document.createElement("input");
                    totalPriceInput.type = "hidden";
                    totalPriceInput.name = "properties[price]";
                    totalPriceInput.value = totalPrice;
                    targetForm.appendChild(totalPriceInput);
                });
            } else {
                console.error("Forms with action '/cart/add' not found.");
            }
        }
    });
</script>
<div id="KASvariant-container"></div>


{% schema %}
  {
    "name": "Kas-Variants",
    "target": "section",
    "stylesheet": "stylesheet.css",
    "enabled_on": {
      "templates": ["product"]
    },
    "settings": []
  }
{% endschema %}
